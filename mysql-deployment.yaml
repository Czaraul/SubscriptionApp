apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1 # Number of MySQL pods to run
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest # Use the latest official MySQL image
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD # Set the root password! VERY IMPORTANT
              value: "insurance_password"  # Replace with a secure password
            - name: MYSQL_DATABASE # Create a database (optional)
              value: insurance_db
          volumeMounts:  # Persist data using a Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim


---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306 # The port your application will use to connect
      targetPort: 3306 # The port MySQL is listening on inside the container
  type: LoadBalancer # For internal access within the cluster. Use LoadBalancer if you need external access.


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce # One pod can read and write at a time
  resources:
    requests:
      storage: 2Gi # Amount of storage to allocate